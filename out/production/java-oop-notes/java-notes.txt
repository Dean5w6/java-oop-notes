public class Vehicle {
    protected String brand = "Ford";

    public void honk() {
        System.out.println("Tuut, tuut!");
    }
}


Overriding Methods
What if a subclass wants to provide its own specific version of an inherited method? This is called method overriding.

We can also use the super keyword to call the parent's version of the method from within the child's method.

// In Car.java
public class Car extends Vehicle {
    private String modelName = "Mustang";

    public String getModelName() {
        return this.modelName;
    }

    @Override
    public void honk() {
        super.honk(); // This calls the original "Tuut, tuut!" from the Vehicle class
        System.out.println("The " + this.modelName + " goes beep beep!");
    }
}

Polymorphism
The word "polymorphism" comes from Greek and literally means "many forms."
In programming, it's the ability of an object, a method, or a variable to take on many different forms.
In practice, it means you can have a single variable of a parent type that can refer to objects of its different child types.

Polymorphism is the principle that allows our Animal interface from before to work so well. It let us treat a Dog and a
Cat as just an Animal.

It works the exact same way with inheritance. We can create different subclasses of Vehicle and then treat them all as
just a Vehicle.

This time, we'll add a Bicycle class that also extends Vehicle.

// In Bicycle.java
public class Bicycle extends Vehicle {
    // Override the honk method for Bicycle
    @Override
    public void honk() {
        System.out.println("Ring ring!");
    }
}

Now, in main, we can create an array of Vehicles that holds both a Car object and a Bicycle object.
// In Main.java
public class Main {
    public static void main(String[] args) {
        Vehicle myCar = new Car();         // A Vehicle variable holding a Car object
        Vehicle myBicycle = new Bicycle(); // A Vehicle variable holding a Bicycle object

        Vehicle[] myVehicles = {myCar, myBicycle};

        for (Vehicle v : myVehicles) {
            // Java automatically calls the correct honk() method for each object
            v.honk();
        }
    }
}


Exception handling
public class Main {
    public static void main(String[] args) {
        int numerator = 10;
        int denominator = 0;

        // This line will cause an "ArithmeticException" and crash the program
        int result = numerator / denominator;

        // This line is never reached
        System.out.println("This message will not be printed.");
    }
}

The fix:
import java.util.InputMismatchException;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean isInputValid = false; // A flag to control our loop

        do {
            try {
                System.out.print("Please enter an integer numerator: ");
                int numerator = scanner.nextInt();

                System.out.print("Please enter an integer denominator: ");
                int denominator = scanner.nextInt();

                int result = numerator / denominator;
                System.out.printf("\nResult: %d / %d = %d\n", numerator, denominator, result);

                isInputValid = true; // If we get here, the input was good, and we can exit the loop
            }
            catch (InputMismatchException e) {
                System.err.println("\nError: You must enter integers. Please try again.\n");
                scanner.nextLine(); // Important: clear the bad input from the scanner
            }
            catch (ArithmeticException e) {
                System.err.println("\nError: Denominator cannot be zero. Please try again.\n");
            }
        } while (!isInputValid);
    }
}

using placeholders: System.out.printf("\nResult: %d / %d = %d\n", numerator, denominator, result);

try-catch format
try {
    // Code that might cause an exception (e.g., dividing by zero)
} catch (ExceptionType name) {
    // Code to run if that specific exception happens
}

GUI
import javax.swing.*; // Import the Swing library

public class Main {
    public static void main(String[] args) {
        // 1. Create the window (the JFrame)
        JFrame frame = new JFrame("My First GUI");

        // 2. Create a component (a JLabel)
        JLabel label = new JLabel("Hello, World!");

        // 3. Add the component to the window
        frame.add(label);

        // 4. Set the window's properties and display it
        frame.setSize(300, 200); // Set size in pixels (width, height)
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Exit the app when the window closes
        frame.setVisible(true); // Make the window visible
    }
}

Swing commands:
JOptionPane	Dialog Box	A simple way to show pop-up messages or get user input.

JFrame	Window	The main window container for an application.

JLabel	Component	A non-editable component used to display text or images.

JTextField	Component	A text box that allows the user to type in a single line of text.

JButton	Component	A standard button that the user can click to trigger an action.

ActionListener	Event Handling	An interface (a contract) for "listening" to button clicks.

ActionEvent	Event Handling	The event object that is created when a button is clicked.

JOptionPane usage
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        JOptionPane.showMessageDialog(null, "Hello, this is a graphical message!");
    }
}

showInputDialog of JOptionPane
import java.util.InputMismatchException;
import java.util.Scanner;
import javax.swing.*;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String name = JOptionPane.showInputDialog("What is your name?");

        String message = String.format("Welcome, %s, to Java Programming!", name);

        JOptionPane.showMessageDialog(null, message);
    }
}

When using String.format():
%d is used for decimal (integer) values
%f is for floating-point numbers
%s is for string values